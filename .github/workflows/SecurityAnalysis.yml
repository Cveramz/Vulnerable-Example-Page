name: Security Analysis

on:
  push:
    branches:
      - Development

permissions:
  contents: write
  pull-requests: write

jobs:
  dependency-review:
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: 'Dependency Review'
        uses: actions/dependency-review-action@v4
        with:
          comment-summary-in-pr: always
          base-ref: 'main'
          head-ref: 'Development'

  bandit_analysis:
    runs-on: ubuntu-latest
    needs: [dependency-review]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install Bandit
        run: |
          python -m pip install --upgrade pip
          pip install bandit
      - name: Run Bandit on Backend
        run: bandit -r Backend/. -v

  nikto_scan:
    runs-on: ubuntu-latest
    needs: [bandit_analysis]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r Backend/requirements.txt
      - name: Run Flask App
        run: |
          export FLASK_APP=Backend
          flask run --host=0.0.0.0 --port=5000 &
        env:
          FLASK_ENV: development
      - name: Wait for Flask to start
        run: sleep 6
      - name: Check if endpoints.txt exists
        run: |
          if [ ! -f Backend/endpoints.txt ]; then
            echo "Error: Backend/endpoints.txt not found"
            exit 1
          fi
      - name: Install Nikto
        run: |
          sudo apt-get update
          sudo apt-get install -y nikto
      - name: Run Nikto on custom endpoints
        run: |
          for url in $(cat Backend/endpoints.txt); do
            host_with_port=$(echo "$url" | awk -F/ '{print $3}')
            path="/$(echo "$url" | cut -d/ -f4-)"
            [ -z "$path" ] && path="/"
            echo "Results for $url" >> nikto-output.txt
            nikto -h "$host_with_port" -root "$path" >> nikto-output.txt
            echo "----------------------------------------" >> nikto-output.txt
          done
          cat nikto-output.txt
      - name: Stop Flask App
        run: pkill -f "flask run"
      - name: Upload Nikto Report
        uses: actions/upload-artifact@v3
        with:
          name: nikto-report
          path: nikto-output.txt

  create_pull_request:
    runs-on: ubuntu-latest
    needs: [nikto_scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Create Pull Request to main
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.CVR_GITHUB_TOKEN }}
          script: |
            const { data: pulls } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              head: 'Development',
              base: 'main',
            });
            if (pulls.length === 0) {
              await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'Automated Pull Request from Development to Main',
                head: 'Development',
                base: 'main',
                body: 'Este pull request fue creado autom√°ticamente por GitHub Actions.',
              });
              console.log('Pull request creado exitosamente.');
            } else {
              console.log('Ya existe un pull request abierto desde Development a main.');
            }
