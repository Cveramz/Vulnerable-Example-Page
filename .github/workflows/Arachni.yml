name: Arachni DAST Analysis

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  dast_analysis:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install Backend Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r Backend/requirements.txt

      - name: Start Flask Application
        run: |
          python Backend/__init__.py --host=0.0.0.0 &
          echo $! > flask_pid.txt
          sleep 10

      - name: Extract Endpoints
        run: |
          # Asegurarse de que el archivo endpoints.txt exista en la ubicación correcta
          if [ ! -f Backend/endpoints.txt ]; then
              echo "El archivo endpoints.txt no fue generado por el backend."
              echo "Contenido del directorio Backend:"
              ls Backend
              exit 1
          fi
          # Leer los endpoints y almacenarlos en una variable
          endpoints=$(cat Backend/endpoints.txt | tr '\n' ' ')
          echo "Endpoints detectados: $endpoints"
          echo "endpoints=$endpoints" >> $GITHUB_ENV

      - name: Run Arachni Scanner
        run: |
          # Limpieza del entorno para liberar espacio
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*
          sudo apt update
          sudo apt install -y libcurl4 libxml2 libxslt-dev zlib1g-dev
          # Descargar Arachni
          curl -L https://github.com/Arachni/arachni/releases/download/v1.6.1.3/Arachni-1.6.1.3-0.6.1.1-linux-x86_64.tar.gz -o arachni.tar.gz
          # Validar y descomprimir el archivo
          if file arachni.tar.gz | grep -q 'gzip compressed data'; then
              echo "Archivo válido, procediendo a descomprimir..."
              tar -xvzf arachni.tar.gz
          else
              echo "Error: El archivo descargado no es válido"; exit 1
          fi
          # Detectar el directorio descomprimido y moverlo
          extracted_dir=$(tar -tzf arachni.tar.gz | head -1 | cut -f1 -d"/")
          echo "Directorio detectado: $extracted_dir"
          mv "$extracted_dir" arachni
          # Ejecutar Arachni para cada endpoint
          for endpoint in ${{ env.endpoints }}; do
              echo "Escaneando endpoint: $endpoint"
              ./arachni/bin/arachni "$endpoint" --report-save-path="arachni_report_${endpoint//\//_}.afr"
          done

      - name: Combine Arachni Reports
        run: |
          # Combinar los reportes generados en un único archivo
          reports=$(ls arachni_report_*.afr | tr '\n' ' ')
          ./arachni/bin/arachni_reporter $reports --reporter=html:outfile=arachni_combined_report.html

      - name: Upload Arachni Report
        uses: actions/upload-artifact@v3
        with:
          name: Arachni Security Report
          path: arachni_combined_report.html

      - name: Stop Flask Application
        if: always()
        run: |
          kill $(cat flask_pid.txt)
